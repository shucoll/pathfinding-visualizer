[{"/Users/shuvam/Desktop/pathfinding-visualizer/src/index.js":"1","/Users/shuvam/Desktop/pathfinding-visualizer/src/reportWebVitals.js":"2","/Users/shuvam/Desktop/pathfinding-visualizer/src/App.js":"3","/Users/shuvam/Desktop/pathfinding-visualizer/src/components/PathfindingVisualizer/PathfindingVisualizer.js":"4","/Users/shuvam/Desktop/pathfinding-visualizer/src/components/PathfindingVisualizer/Node/Node.js":"5"},{"size":500,"mtime":1610792980205,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610792980207,"results":"8","hashOfConfig":"7"},{"size":241,"mtime":1610795755525,"results":"9","hashOfConfig":"7"},{"size":1756,"mtime":1610815929934,"results":"10","hashOfConfig":"7"},{"size":606,"mtime":1610814702298,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1uw7o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/shuvam/Desktop/pathfinding-visualizer/src/index.js",[],["25","26"],"/Users/shuvam/Desktop/pathfinding-visualizer/src/reportWebVitals.js",[],"/Users/shuvam/Desktop/pathfinding-visualizer/src/App.js",[],"/Users/shuvam/Desktop/pathfinding-visualizer/src/components/PathfindingVisualizer/PathfindingVisualizer.js",["27"],"\nimport { useState } from 'react';\n\nimport styles from \"./PathfindingVisualizer.module.scss\"\n\nimport Node from './Node/Node';\n\n\n\nconst PathfindingVisualizer = (props) => {\n\n  const ROW_COUNT = 20;\n  const COLUMN_COUNT = 50;\n\n\n  const getInitialGrid = () => {\n    const initialGrid = [];\n    for (let row = 0; row < ROW_COUNT; row++) {\n      const currentRow = [];\n      for (let col = 0; col < COLUMN_COUNT; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      initialGrid.push(currentRow);\n    }\n    return initialGrid;\n  };\n\n  \n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: false,\n      isFinish: false,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  const [grid, changeGrid] = useState(getInitialGrid());\n\n\n  return (\n    <div className={styles.grid}>\n      {grid.map((row, rowIdx) => {\n        return (\n          <div key={rowIdx}>\n            {row.map((node, nodeIdx) => {\n              const {row, col, isFinish, isStart, isWall} = node;\n              return (\n                <Node\n                  key={nodeIdx}\n                  col={col}\n                  isFinish={isFinish}\n                  isStart={isStart}\n                  isWall={isWall}\n                  //mouseIsPressed={mouseIsPressed}\n                  //onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                  // onMouseEnter={(row, col) =>\n                  //   this.handleMouseEnter(row, col)\n                  // }\n                  // onMouseUp={() => this.handleMouseUp()}\n                  row={row}/>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n}\n\nexport default PathfindingVisualizer\n","/Users/shuvam/Desktop/pathfinding-visualizer/src/components/PathfindingVisualizer/Node/Node.js",["28"],"import styles from './Node.module.scss';\n\n\nconst Node = props => {\n\n  const {\n    col,\n    isFinish,\n    isStart,\n    isWall,\n    // onMouseDown,\n    // onMouseEnter,\n    // onMouseUp,\n    row,\n  } = props;\n\n  const extraClassName = isFinish\n    ? 'node-finish'\n    : isStart\n    ? 'node-start'\n    : isWall\n    ? 'node-wall'\n    : '';\n\n  return(\n    <div\n    id={`node-${row}-${col}`}\n    className={styles.node}\n    // onMouseDown={() => onMouseDown(row, col)}\n    // onMouseEnter={() => onMouseEnter(row, col)}\n    // onMouseUp={() => onMouseUp()}\n    >\n      \n    </div>\n  );\n\n};\n\n\nexport default Node;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":42,"column":16,"nodeType":"35","messageId":"36","endLine":42,"endColumn":26},{"ruleId":"33","severity":1,"message":"37","line":17,"column":9,"nodeType":"35","messageId":"36","endLine":17,"endColumn":23},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'changeGrid' is assigned a value but never used.","Identifier","unusedVar","'extraClassName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]